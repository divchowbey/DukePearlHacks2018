
public class PercolationDFSFast extends PercolationDFS {

	public PercolationDFSFast(int n) {
		super(n); 
	}
	
 @Override
 protected void updateOnOpen(int row, int col) {
	 if (! inBounds(row, col)) {
		 return; 
	 }
	 if (isFull(row, col)) {
		myGrid [row][col] = FULL; 
		if(inBounds(row - 1, col)){dfs(row - 1, col);}
		if(inBounds(row, col-1)){dfs(row, col-1);}
		if(inBounds(row, col+1)){dfs(row, col+1);}
		if(inBounds(row +1, col)){dfs(row + 1, col);}
		dfs(row + 1, col);
	 }
	 
	 if (isFull(row-1, col)) {
		myGrid [row][col] = FULL; 
		if(inBounds(row - 1, col)){dfs(row - 1, col);}
		if(inBounds(row, col-1)){dfs(row, col-1);}
		if(inBounds(row, col+1)){dfs(row, col+1);}
		if(inBounds(row +1, col)){dfs(row + 1, col);}
		dfs(row + 1, col);
	 }
	 
	 if (isFull(row, col-1)) {
		myGrid [row][col] = FULL; 
		if(inBounds(row - 1, col)){dfs(row - 1, col);}
		if(inBounds(row, col-1)){dfs(row, col-1);}
		if(inBounds(row, col+1)){dfs(row, col+1);}
		if(inBounds(row +1, col)){dfs(row + 1, col);}
		dfs(row + 1, col);
	 }
	 
	 
	 if (isFull(row, col+1)) {
		myGrid [row][col] = FULL; 
		if(inBounds(row - 1, col)){dfs(row - 1, col);}
		if(inBounds(row, col-1)){dfs(row, col-1);}
		if(inBounds(row, col+1)){dfs(row, col+1);}
		if(inBounds(row +1, col)){dfs(row + 1, col);}
		dfs(row + 1, col);
	 }
	 
	 
	 if (isFull(row+1, col)) {
		myGrid [row][col] = FULL; 
		if(inBounds(row - 1, col)){dfs(row - 1, col);}
		if(inBounds(row, col-1)){dfs(row, col-1);}
		if(inBounds(row, col+1)){dfs(row, col+1);}
		if(inBounds(row +1, col)){dfs(row + 1, col);}
		dfs(row + 1, col);
	 }
	 
 }
 
 @Override
 public boolean isOpen (int row, int col) {
	 if (! inBounds(row,col)) {
		 throw new IndexOutOfBoundsException ("out of bounds");
	 }
	 else {
		 return super.isOpen(row, col); 
	 }
 }
 
 @Override
 public void open (int row, int col) {
	 if (! inBounds(row,col)) {
		 throw new IndexOutOfBoundsException ("out of bounds");
	 }
	 else {
		 super.open(row, col); 
	 }
	 }
 
 @Override
 public boolean isFull(int row, int col) {
	 if (! inBounds(row,col)) {
		 throw new IndexOutOfBoundsException ("out of bounds");
	 }
	 else {
		 return super.isFull(row, col); 
	 }
 }
}

