import java.util.ArrayList;
import java.util.Collections;
import java.util.PriorityQueue;

/**
 * General trie/priority queue algorithm for implementing Autocompletor
 * 
 * @author Austin Lu
 * @author Jeff Forbes
 */
public class TrieAutocomplete implements Autocompletor {

	/**
	 * Root of entire trie
	 */
	protected Node myRoot;

	/**
	 * Constructor method for TrieAutocomplete. Should initialize the trie rooted at
	 * myRoot, as well as add all nodes necessary to represent the words in terms.
	 * 
	 * @param terms
	 *            - The words we will autocomplete from
	 * @param weights
	 *            - Their weights, such that terms[i] has weight weights[i].
	 * @throws NullPointerException
	 *             if either argument is null
	 * @throws IllegalArgumentException
	 *             if terms and weights are different weight
	 */
	public TrieAutocomplete(String[] terms, double[] weights) {
		if (terms == null || weights == null) {
			throw new NullPointerException("One or more arguments null");
		}

		// Represent the root as a dummy/placeholder node
		myRoot = new Node('-', null, 0);

		for (int i = 0; i < terms.length; i++) {
			add(terms[i], weights[i]);
		}
	}

	/**
	 * Add the word with given weight to the trie. If word already exists in the
	 * trie, no new nodes should be created, but the weight of word should be
	 * updated.
	 * 
	 * In adding a word, this method should do the following: Create any necessary
	 * intermediate nodes if they do not exist. Update the subtreeMaxWeight of all
	 * nodes in the path from root to the node representing word. Set the value of
	 * myWord, myWeight, isWord, and mySubtreeMaxWeight of the node corresponding to
	 * the added word to the correct values
	 * 
	 * @throws a
	 *             NullPointerException if word is null
	 * @throws an
	 *             IllegalArgumentException if weight is negative.
	 */
	private void add(String word, double weight) {
		if (word == null) {
			throw new NullPointerException("null word");
		}
		if (weight < 0) {
			throw new IllegalArgumentException("negative weight");
		}
		Node adder = myRoot;

		for (int i = 0; i < word.length(); i++) {

			if ((adder.children.get(word.charAt(i))) == null) {
				Node child = new Node(word.charAt(i), adder, weight);
				adder.children.put(word.charAt(i), child);

			}
			double maxSub = weight;
			if (adder.mySubtreeMaxWeight > weight) {
				maxSub = adder.mySubtreeMaxWeight;
			}

			adder.mySubtreeMaxWeight = maxSub;
			adder = adder.children.get(word.charAt(i));
		}

		adder.isWord = true;
		adder.myWord = word;
		adder.myWeight = weight;

	}

	/**
	 * Required by the Autocompletor interface. Returns an array containing the k
	 * words in the trie with the largest weight which match the given prefix, in
	 * descending weight order. If less than k words exist matching the given prefix
	 * (including if no words exist), then the array instead contains all those
	 * words. e.g. If terms is {air:3, bat:2, bell:4, boy:1}, then topKMatches("b",
	 * 2) should return {"bell", "bat"}, but topKMatches("a", 2) should return
	 * {"air"}
	 * 
	 * @param prefix
	 *            - A prefix which all returned words must start with
	 * @param k
	 *            - The (maximum) number of words to be returned
	 * @return An Iterable of the k words with the largest weights among all words
	 *         starting with prefix, in descending weight order. If less than k such
	 *         words exist, return all those words. If no such words exist, return
	 *         an empty Iterable
	 * @throws a
	 *             NullPointerException if prefix is null
	 */
	public Iterable<String> topMatches(String prefix, int k) {
		if (prefix == null) {
			throw new NullPointerException("prefix is null" + prefix);
		}
		if (k == 0) {
			return new ArrayList<String>();
		}
		Node current = myRoot;
		for (int l = 0; l < prefix.length(); l++) {
			if (!current.children.containsKey(prefix.charAt(l))) {
				return new ArrayList<String>();
			}
			current = current.children.get(prefix.charAt(l));
		}
		PriorityQueue<Node> npq = new PriorityQueue<Node>(k, new Node.ReverseSubtreeMaxWeightComparator());
		npq.add(current);
		PriorityQueue<Term> tpq = new PriorityQueue<Term>(k, new Term.WeightOrder());
		while (npq.size() > 0) {
			if (tpq.size() >= k) {
				if (tpq.peek().getWeight() > npq.peek().myWeight) {
					break;
				} else {
					tpq.poll();
				}
			}
			current = npq.poll();
			if (current.isWord) {
				tpq.add(new Term(current.getWord(), current.getWeight()));
			}
			for (Node n : current.children.values()) {
				npq.add(n);
			}
		}

		ArrayList<String> list = new ArrayList<String>();
		while (tpq.size() > 0) {
			Term n = tpq.poll();
			list.add(n.getWord());
		}
		Collections.reverse(list);
		return list;

	}

	/**
	 * Given a prefix, returns the largest-weight word in the trie starting with
	 * that prefix.
	 * 
	 * @param prefix
	 *            - the prefix the returned word should start with
	 * @return The word from with the largest weight starting with prefix, or an
	 *         empty string if none exists
	 * @throws a
	 *             NullPointerException if the prefix is null
	 */
	public String topMatch(String prefix) {
		if (myRoot == null) {
			return "";
		}
		if (prefix == null) {
			throw new NullPointerException("null");
		}

		Node current = myRoot;
		for (int k = 0; k < prefix.length(); k++) {
			if (!current.children.containsKey(prefix.charAt(k))) {
				return "";
			}
			current = current.children.get(prefix.charAt(k));
		}

		double max = current.mySubtreeMaxWeight;
		boolean enter = true;

		while (enter) {
			if (max == current.myWeight) {
				enter = false;
				break;
			}
			for (Node find : current.children.values()) {
				if (find.mySubtreeMaxWeight == max) {
					current = find;
					break;
				}
			}
		}
		return current.getWord();

	}

	/**
	 * Return the weight of a given term. If term is not in the dictionary, return
	 * 0.0
	 */
	public double weightOf(String term) {
		Node current = myRoot;
		for (int k = 0; k < term.length(); k++) {
			if (!current.children.containsKey(term.charAt(k))) {
				return 0.0;
			}
			current = current.children.get(term.charAt(k));
		}
		return current.getWeight();

	}
}
