
public class LinkStrand implements IDnaStrand {
	private class Node {
		String info;
		Node next;

		public Node(String s) {
			info = s;
			next = null;
		}
	}

	private Node myFirst, myLast;
	private long mySize;
	private int myAppends;
	private int myIndex;
	private int myLocalIndex;
	private Node myCurrent;

	public LinkStrand() {
		this("");
	}

	public LinkStrand(String a) {
		initialize(a);
	}

	@Override
	public long size() {
		return mySize;
	}

	@Override
	public void initialize(String source) { // initializes instance variables
		Node myNode = new Node(source);
		mySize = source.length();
		myFirst = myNode;
		myLast = myNode;
		myAppends = 0;
		// myIndex = 0;
		// myLocalIndex = 0;
		myCurrent = myFirst;

	}

	@Override
	public IDnaStrand getInstance(String source) {
		return new LinkStrand(source);
	}

	@Override
	public IDnaStrand append(String dna) {
		Node myNode = new Node(dna);
		Node parse = myFirst;
		while (parse.next != null) { // finds last node 
			parse = parse.next;
		}
		parse.next = myNode;
		this.myLast = myNode;
		myAppends += 1; // increments append value
		mySize += dna.length(); //increments size
		return this;
	}

	@Override
	public IDnaStrand reverse() {
		Node parse = myFirst.next;
		StringBuilder copy = new StringBuilder(myFirst.info);
		copy.reverse();
		LinkStrand current = new LinkStrand(copy.toString());
		while (parse != null) {
			StringBuilder rev = new StringBuilder(parse.info);
			rev.reverse(); // calls the reverse method of a StringBuilder 
			Node newFirst = new Node(rev.toString());
			newFirst.next = current.myFirst; // adds new reversed method to the beginning 
			current.myFirst = newFirst;
			parse = parse.next;
		}

		return current;

	}

	@Override
	public int getAppendCount() {
		return myAppends;
	}

	@Override
	public char charAt(int index) {

		if (index >= mySize || index < 0) {
			throw new IndexOutOfBoundsException("error");
		}
		if (index == myIndex + 1) { // if next index is the desired index for O(1) 
			if (myLocalIndex + 1 < myCurrent.info.length()) {
				myIndex++;
				myLocalIndex++;
				return myCurrent.info.charAt(myLocalIndex);
			} else {
				myCurrent = myCurrent.next;
				myLocalIndex = 0;
				myIndex++;
				return myCurrent.info.charAt(myLocalIndex);
			}
		}

		/*
		 * else if (index < myIndex) { while (myIndex != index) { myLocalIndex++;
		 * myIndex++; if (myLocalIndex >= myCurrent.info.length()) { myLocalIndex = 0;
		 * myCurrent = myCurrent.next; } } return myCurrent.info.charAt(myLocalIndex); }
		 */

		else { // all other cases, start from beginning 
			myIndex = 0;
			myLocalIndex = 0;
			myCurrent = myFirst;
			while (myIndex != index) {
				myLocalIndex++;
				myIndex++;
				if (myLocalIndex >= myCurrent.info.length()) {
					myLocalIndex = 0;
					myCurrent = myCurrent.next;
				}
			}
			return myCurrent.info.charAt(myLocalIndex);

		}
	}

	public String toString() { // converts info in nodes to a string builder 
		Node a = myFirst;
		StringBuilder ret = new StringBuilder();
		while (a != null) {
			ret.append(a.info);
			a = a.next;
		}
		return ret.toString();
	}

}
