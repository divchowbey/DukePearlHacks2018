
public class WordGram implements Comparable<WordGram>{
	private String [] myWords; 
	private int myHash;
	
	public WordGram(String[] words, int index, int size) {
		myWords = new String [size];
		for(int i =0; i<size; i++) {
			myWords[i] = words[index+i]; 
		}
		myHash = 17;
	}
	
	@Override
	public int hashCode() {
			
			//if (h == 0 && myWords.length > 0) {
			for (int i = 0; i < myWords.length; i++) {
			myHash = 31 * myHash + myWords[i].hashCode();
			//}
			
			}
			return myHash;
			
	}
	
	@Override
	public String toString() {
		return String.join(" ", myWords);
	}
	
	@Override
	public boolean equals(Object other) {
		if (other == null || ! (other instanceof WordGram)) {
			return false;
		}
		WordGram wg = (WordGram) other; 
		if(wg.myWords.length != this.myWords.length) {
			return false; 
		}
		for(int i =0; i<this.myWords.length; i++) {
			if(!(wg.myWords[i].equals(this.myWords[i]))){
				return false; 
			}
		}
		return true;
	}
	
	@Override
	public int compareTo(WordGram wg) {
		String thisInst = this.toString();
		String wgInst = wg.toString();
		return thisInst.compareTo(wgInst); 
	}
	
	public int length() {
		return myWords.length;
	}
	
	public WordGram shiftAdd(String last) {
		String [] edited = new String[this.myWords.length]; 
		for(int i=0; i<edited.length-1; i++) {
			edited[i] = this.myWords[i+1];
		}
		edited[edited.length-1]= last; 
		WordGram shifted = new WordGram(edited,0,edited.length);
		return shifted; 
	}
}
